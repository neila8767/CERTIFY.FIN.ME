generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Notification {
  id         Int              @id @default(autoincrement())
  title      String
  message    String
  isRead     Boolean          @default(false)
  type       NotificationType
  createdAt  DateTime         @default(now())
  receiverId Int
  senderId   Int?
  receiver   Account          @relation("Notification_receiver", fields: [receiverId], references: [id])
  sender     Account?         @relation("NotificationSender", fields: [senderId], references: [id])
}

model Account {
  id                    Int               @id @default(autoincrement())
  username              String
  email                 String            @unique
  password              String
  role                  Role
  isVerified            Boolean           @default(false)
  verificationToken     String?           @unique
  createdAt             DateTime          @default(now())
  ecole                 Ecole?            @relation("EcoleToAccount")
  etudiant              Etudiant_account? @relation("Etudiant_accountToAccount")
  ministere             Ministere?        @relation("MinistereToAccount")
  notificationsReceived Notification[]    @relation("Notification_receiver")
  notificationsSent     Notification[]    @relation("NotificationSender")
  university            University?       @relation("UniversityToAccount")
}

model University {
  idUni            Int            @id @default(autoincrement())
  nomUni           String
  adresseUni       String
  telephoneUni     String
  emailUni         String         @unique
  accountId        Int            @unique
  walletAddress    String?        @unique
  walletIV         String         @default("initial_iv_value")
  walletPrivateKey String?
  modeleDiplomeId  Int?
  departments      Department[]
  faculties        Faculty[]
  account          Account        @relation("UniversityToAccount", fields: [accountId], references: [id])
  modeleDiplome    ModeleDiplome? @relation(fields: [modeleDiplomeId], references: [idModele])
}

model ModeleDiplome {
  idModele     Int          @id @default(autoincrement())
  nomModele    String
  cheminModele String
  universites  University[]
}

model ModeleDiplomeECOLE {
  idModele     Int     @id @default(autoincrement())
  nomModele    String
  cheminModele String
  ecoles       Ecole[]
}

model Ecole {
  idEcole          Int                 @id @default(autoincrement())
  nomEcole         String
  telephoneEcole   String
  emailEcole       String              @unique
  accountId        Int                 @unique
  role             RoleEcole
  walletAddress    String?             @unique
  walletIV         String              @default("initial_iv_value")
  walletPrivateKey String?
  modeleDiplomeId  Int?
  adresseEcole     String
  account          Account             @relation("EcoleToAccount", fields: [accountId], references: [id])
  modeleDiplome    ModeleDiplomeECOLE? @relation(fields: [modeleDiplomeId], references: [idModele])
  EcoleAnnee       EcoleAnnee[]
  Formation        Formation[]
}

model University_OFFICIAL {
  idUni        Int    @id @default(autoincrement())
  nomUni       String
  adresseUni   String
  telephoneUni String
  emailUni     String @unique
}

model Ecole_OFFICIAL {
  idEcole        Int       @id @default(autoincrement())
  nomEcole       String
  telephoneEcole String
  emailEcole     String    @unique
  role           RoleEcole
  adresseEcole   String
}

model Etudiant_account {
  idEtudiant Int     @id @default(autoincrement())
  nom        String
  prenom     String
  email      String  @unique
  telephone  String  @unique
  accountId  Int     @unique
  account    Account @relation("Etudiant_accountToAccount", fields: [accountId], references: [id])
}

model Faculty {
  idFaculty           Int                   @id @default(autoincrement())
  nomFaculty          String
  idUni               Int
  cursusUniversitaire CursusUniversitaire[]
  departments         Department[]
  university          University            @relation(fields: [idUni], references: [idUni], onDelete: Cascade)
}

model Department {
  idDepart            Int                   @id @default(autoincrement())
  nomDepart           String
  idFaculty           Int
  idUni               Int
  cursusUniversitaire CursusUniversitaire[]
  faculty             Faculty               @relation(fields: [idFaculty], references: [idFaculty], onDelete: Cascade)
  university          University            @relation(fields: [idUni], references: [idUni], onDelete: Cascade)
}

model Etudiant {
  idEtudiant          Int                   @id @default(autoincrement())
  nom                 String
  prenom              String
  email               String                @unique
  matricule           String                @unique
  telephone           String                @unique
  dateNaissance       DateTime
  lieuNaissance       String
  CursusUniversitaire CursusUniversitaire[]
  diplomes            Diplome[]
}

model EtudiantMinistere {
  idEtudiantMinistere Int        @id @default(autoincrement())
  nom                 String
  prenom              String
  email               String     @unique
  matricule           String     @unique
  dateNaissance       DateTime
  lieuNaissance       String
  ministereId         Int?
  ministere           Ministere? @relation(fields: [ministereId], references: [id])
}

model Ministere {
  id               Int                 @id @default(autoincrement())
  nomMinistere     String
  emailMinistere   String              @unique
  pays             String?
  accountId        Int                 @unique
  numeroTelephone  String?             @unique
  walletAddress    String?             @unique
  walletIV         String              @default("initial_iv_value")
  walletPrivateKey String?
  typeMinistere    MinistereType       @default(ENSEIGNEMENT_SUPERIEUR)
  etudiants        EtudiantMinistere[]
  account          Account             @relation("MinistereToAccount", fields: [accountId], references: [id])
}

model Diplome {
  id            Int         @id @default(autoincrement())
  diplomaHash   String      @unique
  etablissement String
  studentName   String
  birthDate     DateTime
  diplomaTitle  String
  diplomaType   DiplomaType
  dateOfIssue   DateTime
  speciality    String
  complete      Boolean
  etudiantId    Int
  etudiant      Etudiant    @relation(fields: [etudiantId], references: [idEtudiant], onDelete: Cascade)

  @@index([etudiantId])
}

model CursusUniversitaire {
  id              Int                @id @default(autoincrement())
  section         String
  groupe          String
  filiere         String
  idFaculty       Int?
  idDepart        Int?
  specialite      String?
  moyenneAnnuelle Float?
  idAnnee         Int
  niveau          Int
  idEtudiant      Int
  annee           AnneeUniversitaire @relation(fields: [idAnnee], references: [idAnnee], onDelete: Cascade)
  department      Department?        @relation(fields: [idDepart], references: [idDepart], onDelete: Cascade)
  etudiant        Etudiant           @relation(fields: [idEtudiant], references: [idEtudiant])
  faculty         Faculty?           @relation(fields: [idFaculty], references: [idFaculty], onDelete: Cascade)
}

model AnneeUniversitaire {
  idAnnee             Int                   @id @default(autoincrement())
  annee               String
  isCurrent           Boolean
  anneediplome        Int
  cursusUniversitaire CursusUniversitaire[]
}

model CursusEcole {
  id            Int           @id @default(autoincrement())
  moyenne       Float?
  etudiantId    Int
  anneeId       Int
  formationId   Int
  EcoleAnnee    EcoleAnnee    @relation(fields: [anneeId], references: [id])
  EtudiantEcole EtudiantEcole @relation(fields: [etudiantId], references: [idEtudiantEcole])
  Formation     Formation     @relation(fields: [formationId], references: [idFormation])

  @@unique([etudiantId, anneeId, formationId])
  @@index([formationId])
}

model EcoleAnnee {
  id           Int           @id @default(autoincrement())
  annee        String
  anneediplome Int
  isCurrent    Boolean       @default(false)
  ecoleId      Int
  CursusEcole  CursusEcole[]
  Ecole        Ecole         @relation(fields: [ecoleId], references: [idEcole])

  @@unique([annee, ecoleId])
}

model EtudiantEcole {
  idEtudiantEcole Int            @id @default(autoincrement())
  nom             String
  prenom          String
  email           String         @unique
  matricule       String         @unique
  moyenne         Float?
  dateInscription DateTime       @default(now())
  telephone       String?        @unique
  dateNaissance   DateTime
  lieuNaissance   String?
  CursusEcole     CursusEcole[]
  DiplomeEcole    DiplomeEcole[]
}

model Formation {
  idFormation   Int           @id @default(autoincrement())
  nomFormation  String
  duree         String?
  typeFormation String
  ecoleId       Int
  CursusEcole   CursusEcole[]
  Ecole         Ecole         @relation(fields: [ecoleId], references: [idEcole])
}

model HistoriqueVerification {
  id               Int      @id @default(autoincrement())
  idEtudiant       Int
  nomEtudiant      String
  lienVerification String
  titreDiplome     String
  etablissement    String
  dateDemande      DateTime @default(now())
  dateDernierAcces DateTime @default(now())
  idCompte         Int

  @@index([idEtudiant])
  @@index([idCompte])
}

model DiplomeEcole {
  id              Int           @id @default(autoincrement())
  diplomaHash     String        @unique
  etablissement   String
  studentName     String
  birthDate       DateTime
  diplomaTitle    String
  dateOfIssue     DateTime      @default(now())
  specialite      String
  moyenne         Float?
  mention         String?
  etudiantEcoleId Int
  complete        Boolean       @default(false)
  diplomaType     String
  EtudiantEcole   EtudiantEcole @relation(fields: [etudiantEcoleId], references: [idEtudiantEcole])

  @@index([etudiantEcoleId])
}

enum Role {
  UNIVERSITY
  STUDENT
  ECOLE
  MINISTERE
}

enum RoleEcole {
  ECOLE_SUPERIEURE
  ECOLE_FORMATION
}

enum NotificationType {
  DIPLOME_VALIDE
  DIPLOME_REJETE
  NOUVELLE_DEMANDE
  COMPTE_VERIFIE
  ALERT_GENERAL
}

enum DiplomaType {
  Universite
  EcolePrivee
  EcoleProfessionnelle
}

enum MinistereType {
  ENSEIGNEMENT_SUPERIEUR
  FORMATION_PROFESSIONNELLE
}
